// Generated by CoffeeScript 1.10.0

/*
 * ----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * ----------------------------------------------------------------------------
 */

(function() {
  var classOf,
    slice = [].slice;

  classOf = function(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
  };

  if (Array.prototype.reduce == null) {
    Array.prototype.reduce = function() {
      var accumulator, array, arrayLength, currentIndex, currentValue, moreArgs;
      accumulator = arguments[0], moreArgs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      array = this;
      arrayLength = array.length;
      currentIndex = 0;
      currentValue = void 0;
      if (array == null) {
        throw new TypeError("Object is null or undefined");
      }
      if (typeof accumulator !== "function") {
        throw new TypeError("First argument is not callable");
      }
      if (moreArgs.length === 0) {
        if (arrayLength === 0) {
          throw new TypeError("Array length is 0 and no second argument");
        } else {
          currentValue = array[0];
          currentIndex = 1;
        }
      } else {
        currentValue = moreArgs[0];
      }
      while (currentIndex < arrayLength) {
        if (currentIndex in array) {
          currentValue = accumulator.call(void 0, currentValue, array[currentIndex], array);
        }
        ++currentIndex;
      }
      return currentValue;
    };
  }

  if (Array.prototype.map == null) {
    Array.prototype.map = function(callback, thisArg) {
      var elem, i, index, inputArray, len, len1, outputArray;
      if (typeof this === "undefined" || this === null) {
        throw new TypeError("this is null or not defined");
      }
      if (typeof callback !== "function") {
        throw new TypeError(callback + " is not a function");
      }
      thisArg = thisArg ? thisArg : void 0;
      inputArray = Object(this);
      len = inputArray.length >>> 0;
      outputArray = new Array(len);
      for (index = i = 0, len1 = inputArray.length; i < len1; index = ++i) {
        elem = inputArray[index];
        if (index in inputArray) {
          outputArray[index] = callback.call(thisArg, elem, index, inputArray);
        }
      }
      return outputArray;
    };
  }

  if (Array.isArray == null) {
    Array.isArray = function(vArg) {
      return Object.prototype.toString.call(vArg) === "[object Array]";
    };
  }

  exports.isObject = function(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === 'object';
  };

  exports.isString = function(obj) {
    return typeof obj === 'string';
  };

  exports.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  exports.isArray = Array.isArray;

  exports.isNumber = function(obj) {
    return typeof obj === 'number';
  };

  exports.isBoolean = function(obj) {
    return typeof obj === 'boolean';
  };

  exports.isDate = function(obj) {
    return classOf(obj) === 'date';
  };

  exports.functionName = function(fn) {
    var index, prefix, source;
    if (typeof Function.prototype.name === 'function') {
      return Function.prototype.name.call(fn);
    } else {
      source = fn.toString();
      prefix = 'function ';
      if (source.slice(0, +(prefix.length - 1) + 1 || 9e9) === prefix) {
        index = source.indexOf('(', prefix.length);
        if (index > prefix.length) {
          return source.slice(prefix.length, +(index - 1) + 1 || 9e9);
        }
      }
      return null;
    }
  };

}).call(this);
