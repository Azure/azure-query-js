// Generated by CoffeeScript 1.5.0-pre

/*
#
# Copyright (c) Microsoft Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
*/


(function() {
  var Node, Visitor, _;

  _ = require('./Utilities');

  /*
  # The base Node class for all expressions used for analysis and translation by
  # visitors.  It's designed to interop with other modules that create expression
  # trees using object literals with a type tag.
  */


  exports.Node = Node = (function() {
    /*
    # Type tag of the node that allows for eash dispatch in visitors.  This is
    # automatically set in the constructor (so it's important to call super() in
    # derived Node classes).
    */

    Node.prototype.type = 'Node';

    /*
    # Initializes a new instance of the Node class and sets its type tag.
    */


    function Node() {
      this.type = _.functionName(this.constructor);
    }

    return Node;

  })();

  /*
  # Base class for all visitors
  */


  exports.Visitor = Visitor = (function() {

    function Visitor() {}

    /*
    # Visit a node.
    */


    Visitor.prototype.visit = function(node) {
      var element, _i, _len, _results;
      if (_.isArray(node)) {
        _results = [];
        for (_i = 0, _len = node.length; _i < _len; _i++) {
          element = node[_i];
          _results.push(this.visit(element));
        }
        return _results;
      } else if (!(node != null ? node.type : void 0)) {
        return node;
      } else if (!_.isFunction(this[node.type])) {
        throw "Unsupported expression " + (this.getSource(node));
      } else {
        return this[node.type](node);
      }
    };

    /*
    # Get the source code corresponding to a node.
    */


    Visitor.prototype.getSource = function(node) {
      /* It is expected this will be overridden in derived visitors.
      */
      return null;
    };

    return Visitor;

  })();

}).call(this);
