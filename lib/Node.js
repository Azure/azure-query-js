// Generated by CoffeeScript 1.10.0

/*
 * ----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * ----------------------------------------------------------------------------
 */

(function() {
  var Node, Visitor, _;

  _ = require('./Utilities');


  /*
   * The base Node class for all expressions used for analysis and translation by
   * visitors.  It's designed to interop with other modules that create expression
   * trees using object literals with a type tag.
   */

  exports.Node = Node = (function() {

    /*
     * Type tag of the node that allows for eash dispatch in visitors.  This is
     * automatically set in the constructor (so it's important to call super() in
     * derived Node classes).
     */
    Node.prototype.type = 'Node';


    /*
     * Initializes a new instance of the Node class and sets its type tag.
     */

    function Node() {
      this.type = _.functionName(this.constructor);
    }

    return Node;

  })();


  /*
   * Base class for all visitors
   */

  exports.Visitor = Visitor = (function() {
    function Visitor() {}


    /*
     * Visit a node.
     */

    Visitor.prototype.visit = function(node) {
      var element, i, len, results;
      if (_.isArray(node)) {
        results = [];
        for (i = 0, len = node.length; i < len; i++) {
          element = node[i];
          results.push(this.visit(element));
        }
        return results;
      } else if (!(node != null ? node.type : void 0)) {
        return node;
      } else if (!_.isFunction(this[node.type])) {
        throw "Unsupported expression " + (this.getSource(node));
      } else {
        return this[node.type](node);
      }
    };


    /*
     * Get the source code corresponding to a node.
     */

    Visitor.prototype.getSource = function(node) {

      /* It is expected this will be overridden in derived visitors. */
      return null;
    };

    return Visitor;

  })();

}).call(this);
